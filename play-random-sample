#!/usr/bin/env bash
IFS=$'\n'
temp_cover="/Users/michaelzfreeman/Temp/cover.jpg"
dir=$(basename "$PWD")
cache=".play-random-cache-$(echo "$dir" | tr / -)"

TITLE='\033[1;33m'
CLI='\033[4;37m'
NC='\033[0m'

echo
echo -e "\U1F3A7${TITLE}Play Random Audio File${NC}, v2.1, by Michael Z Freeman, 2025"

declare -a files plays

# ------------------------------
# Load or build cache
# ------------------------------
if test -f "$cache"; then
    echo
    echo -e "\U1F477Retrieving audio and video files from cache file..."
    while IFS="|" read -r f p; do
        [ -n "$f" ] || continue
        files+=("$f")
        plays+=("${p:-0}") # default 0 if missing
    done < "$cache"
else
    echo
    echo -e "\U1F50EScanning for audio and video files in current directory (result will be cached) ..."
    listall=$(tree -fi)
    count=0
    for i in $listall; do
        check=$(file --mime "$i" 2>/dev/null | grep -e audio/ -e video/)
        if [ -n "$check" ]; then
            files+=("$i")
            plays+=(0)
            echo "Added $i"
        fi
        count=$((count + 1))
    done

    echo
    echo -e "\U1F477Writing cache..."
    : > "$cache"
    for i in "${!files[@]}"; do
        echo "${files[$i]}|${plays[$i]}" >> "$cache"
    done
fi

# ------------------------------
# Weighted random choice
# ------------------------------
echo
echo -e "\U1F477Generating weighted random choice from scanned audio and video files..."

weighted=()
min_play=$(printf "%s\n" "${plays[@]}" | sort -n | head -1)

for i in "${!files[@]}"; do
    # Weight: give more chances to least-played
    weight=$(( (min_play + 1) * 2 - plays[i] ))
    [ $weight -lt 1 ] && weight=1
    for ((j=0; j<$weight; j++)); do
        weighted+=("$i")
    done
done

choice_index=${weighted[$RANDOM % ${#weighted[@]}]}
choice="${files[$choice_index]}"

echo "Chosen file: $choice (playcount=${plays[$choice_index]})"

# ------------------------------
# Increment play count + save BEFORE playback
# ------------------------------
plays[$choice_index]=$((plays[$choice_index] + 1))

: > "$cache"
for i in "${!files[@]}"; do
    echo "${files[$i]}|${plays[$i]}" >> "$cache"
done

# ------------------------------
# Handle playback
# ------------------------------
if [ "$1" ]; then
    case $1 in
        1)
            realchoice=$(realpath "$choice")
            echo "\"$realchoice\"" | xsel -ib
            echo
            echo -e "\U1F50APlaying ${CLI}\"$choice\"${NC} in Mixxx deck 1 ..."
            wmctrl -x -a "mixxx.Mixxx"
            sleep 0.5
            xte "keydown Shift_L" "keydown f" "keyup Shift_L" "keyup f"
            xte "keydown Control_L" "keydown o" "keyup Control_L" "keyup o"
            sleep 2
            xte "keydown Control_L" "keydown v" "keyup Control_L" "keyup v"
            sleep 1
            xte "key Return"
            sleep 1
            xte "key d"
            ;;
        2)
            realchoice=$(realpath "$choice")
            echo "\"$realchoice\"" | xsel -ib
            echo
            echo -e "\U1F50APlaying ${CLI}\"$choice\"${NC} in Mixxx deck 2 ..."
            wmctrl -x -a "mixxx.Mixxx"
            sleep 0.5
            xte "keydown Shift_L" "keydown :" "keyup Shift_L" "keyup :"
            xte "keydown Control_L" "keydown Shift_L" "keydown o"
            xte "keyup Control_L" "keyup Shift_L" "keyup o"
            sleep 2
            xte "keydown Control_L" "keydown v" "keyup Control_L" "keyup v"
            sleep 1
            xte "key Return"
            sleep 1
            xte "key l"
            ;;
        mpv)
            echo
            echo -e "\U1F50APlaying using ${CLI}mpv \"$choice\"${NC}..."
            ffmpeg -y -i "$choice" -an -vcodec copy "$temp_cover" 2>/dev/null
            if [ -f "$temp_cover" ]; then
                terminal-notifier -title "Play Random Audio File" -message "$choice" -contentImage "$temp_cover"
                rm "$temp_cover"
            else
                echo "    No embedded cover found or extraction failed."
            fi
            /Applications/mpv.app/Contents/MacOS/mpv --macos-render-timer=system --audio-pitch-correction=no --cover-art-auto=no --volume=$2 "$choice"
            ;;
    esac
else
    echo
    echo -e "Options: 1 or 2 to play in Mixxx deck, mpv with volume 0 to 100 to play with mpv."
fi
